#include <iostream>
#include <vector>
#include <fstream>
#include <string>
#include <sstream>
#include <algorithm>
#include <chrono>


std::vector<std::string> Read(const std::string& nazwa_pliku, std::vector<std::string>& dane, int pom = 0) {
	std::ifstream plik(nazwa_pliku);
	std::string linia;
	std::string index;
	int licznik = 0;
	auto start = std::chrono::high_resolution_clock::now();
	if (pom != 0)
	{
		for(int i = 0; i < pom+2; i++){
			std::getline(plik, linia);
			index = linia.back();
			if (index != ",") {
				dane.push_back(linia);
			}
			else {
				licznik++;
			}
		}
	}
	else
	{
		while (std::getline(plik, linia)) {
			index = linia.back();
			if (index != ",") {
				dane.push_back(linia);
			}
			else {
				licznik++;
			}
		}
	}
	plik.close();
	auto end = std::chrono::high_resolution_clock::now();
	std::cout << "Read time: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms" << std::endl;
	std::cout << "usuniete: " << licznik << std::endl;
	return dane;
}

void Show(std::vector<std::string>& arraylica)
{
	for (const auto& pola : arraylica)
	{
		std::cout << pola << " " << std::endl;
	}
}

bool Check(std::vector<std::string>& arraylica)
{
	for (int i = 1; i < arraylica.size() - 1; i++)
	{
		if (std::stoi(arraylica[i].substr(arraylica[i].find_last_of(',') + 1)) > std::stoi(arraylica[i + 1].substr(arraylica[i + 1].find_last_of(',') + 1)))
		{
			return false;
		}
	}
	return true;
}

void Merge(std::vector<std::string>& array, int left, int mid, int right) {
	int n1 = mid - left + 1;
	int n2 = right - mid;

	std::vector<std::string> L(n1), R(n2);

	for (int i = 0; i < n1; i++) {
		L[i] = array[left + i];
	}
	for (int j = 0; j < n2; j++) {
		R[j] = array[mid + 1 + j];
	}

	int i = 0, j = 0, k = left;

	while (i < n1 && j < n2) {
		if (std::stoi(L[i].substr(L[i].find_last_of(',') + 1)) <= std::stoi(R[j].substr(R[j].find_last_of(',') + 1))) {
			array[k] = L[i];
			i++;
		}
		else {
			array[k] = R[j];
			j++;
		}
		k++;
	}

	while (i < n1) {
		array[k] = L[i];
		i++;
		k++;
	}

	while (j < n2) {
		array[k] = R[j];
		j++;
		k++;
	}
}

void MergeSort(std::vector<std::string>& array, int left, int right) {
	if (left >= right) {
		return;
	}
	int mid = left + (right - left) / 2;
	MergeSort(array, left, mid);
	MergeSort(array, mid + 1, right);
	Merge(array, left, mid, right);
}

void QuickSort(std::vector<std::string>& array, int left, int right) {
	int i = left, j = right;
	int pivot = std::stoi(array[(left + right) / 2].substr(array[(left + right) / 2].find_last_of(',') + 1));

	while (i <= j) {
		while (std::stoi(array[i].substr(array[i].find_last_of(',') + 1)) < pivot) {
			i++;
		}
		while (std::stoi(array[j].substr(array[j].find_last_of(',') + 1)) > pivot) {
			j--;
		}
		if (i <= j) {
			std::swap(array[i], array[j]);
			i++;
			j--;
		}
	}

	if (left < j) {
		QuickSort(array, left, j);
	}
	if (i < right) {
		QuickSort(array, i, right);
	}
}


void BucketSort(std::vector<std::string>& array) {

	std::vector<std::vector<std::string>> buckets(11);

	for (int i = 1; i < array.size(); i++) {
		int bucket_index = std::stoi(array[i].substr(array[i].find_last_of(',') + 1));
		buckets[bucket_index].push_back(array[i]);
	}

	int index = 1;
	for (int i = 1; i < 11; i++) {
		for (std::string s : buckets[i]) {
			array[index] = s;
			index++;
		}
	}
}


void testSortingAlgorithms(std::vector<std::string>& data) {
	std::vector<std::string> data_copy(data);

	// Quicksort
	data_copy = data; 
	auto start = std::chrono::high_resolution_clock::now();
	QuickSort(data_copy, 1, data_copy.size() - 1);
	auto end = std::chrono::high_resolution_clock::now();
	std::cout << "Quicksort: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms" << std::endl;

	// Merge sort
	data_copy = data; 
	start = std::chrono::high_resolution_clock::now();
	MergeSort(data_copy, 1, data_copy.size() - 1);
	end = std::chrono::high_resolution_clock::now();
	std::cout << "Merge sort: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms" << std::endl;

	// Bucket sort
	data_copy = data; 
	start = std::chrono::high_resolution_clock::now();
	BucketSort(data_copy);
	end = std::chrono::high_resolution_clock::now();
	std::cout << "Bucket sort: " << std::chrono::duration_cast<std::chrono::milliseconds>(end - start).count() << "ms" << std::endl;
}

int Mean(std::vector<std::string>& array)
{
	int sum = 0;
	for (int i = 1; i < array.size() - 1; i++)
	{
		sum = sum + std::stoi(array[i].substr(array[i].find_last_of(',') + 1));
	}
	return sum/(array.size()-1);
}

int Median(std::vector<std::string>& array)
{
	int num;
	if (array.size() % 2 == 0)
	{
		num = std::stoi(array[array.size() / 2].substr(array[array.size() / 2].find_last_of(',') + 1));
		return num;
	}
	else
	{
		 num = std::stoi(array[(array.size()+1) / 2].substr(array[(array.size()+1) / 2].find_last_of(',') + 1));
		return num;
	}
	
}

int main()
{
	std::vector<std::string> array10k;
	std::vector<std::string> array100k;
	std::vector<std::string> array500k;
	std::vector<std::string> array1kk;
	std::vector<std::string> arrayFull;
	
	Read("projekt2_dane.csv", array10k, 10000);
	Read("projekt2_dane.csv", array100k, 100000);
	Read("projekt2_dane.csv", array500k, 500000);
	Read("projekt2_dane.csv", array1kk, 1000000);
	Read("projekt2_dane.csv", arrayFull);
	

	std::cout << "\n____________________________10k\n" << std::endl;
	testSortingAlgorithms(array10k);
	std::cout << "Mean: " << Mean(array10k) << std::endl;
	std::cout << "Median: " << Median(array10k) << std::endl;
	std::cout << "\n___________________________100k\n" << std::endl;
	testSortingAlgorithms(array100k);
	std::cout << "Mean: " << Mean(array100k) << std::endl;
	std::cout << "Median: " << Median(array100k) << std::endl;
	std::cout << "\n___________________________500k\n" << std::endl;
	testSortingAlgorithms(array500k);
	std::cout << "Mean: " << Mean(array500k) << std::endl;
	std::cout << "Median: " << Median(array500k) << std::endl;
	std::cout << "\n____________________________1kk\n" << std::endl;
	testSortingAlgorithms(array1kk);
	std::cout << "Mean: " << Mean(array1kk) << std::endl;
	std::cout << "Median: " << Median(array1kk) << std::endl;
	std::cout << "\n___________________________Full\n" << std::endl;
	testSortingAlgorithms(arrayFull);
	std::cout << "Mean: " << Mean(arrayFull) << std::endl;
	std::cout << "Median: " << Median(arrayFull) << std::endl;
	std::cout << "\n_______________________________\n" << std::endl;

	
	return 0;
}
